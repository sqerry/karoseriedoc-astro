---
import Layout from "../layouts/Layout.astro";
import PageHeader from "../components/PageHeader.astro";
import i18next, { t, changeLanguage } from "i18next";

changeLanguage("cs");
---

<Layout title="Galerie" description="Galerie">
    <main>
        <PageHeader
            pageName={t('gallery.galleryPageTitle')}
            imageSrc="/images/DSC_5138.webp"
            customClass="page-header--galerie"
        />

        <section class="gallery">
            <div class="container">
                <div class="row">
                    <div class="gallery-filter">
                        <!-- <span class="filter-item active" data-filter="all">{t('gallery.filter.all')}</span>
                        <span class="filter-item" data-filter="filter1">{t('gallery.filter.filter1')}</span>
                        <span class="filter-item" data-filter="filter2">{t('gallery.filter.filter2')}</span>
                        <span class="filter-item" data-filter="filter3">{t('gallery.filter.filter3')}</span> -->
                        <div class="row">
                            <!-- gallery item start -->
                            <div class="gallery-item">
                                <div class="gallery-item-inner">
                                    <img src="/images/DSC_5099.webp" alt="Image 1" loading="lazy" />
                                </div>
                            </div>
                            <!-- gallery item end -->
                            <!-- gallery item start -->
                            <div class="gallery-item">
                                <div class="gallery-item-inner">
                                    <img src="/images/DSC_5152.webp" alt="Image 2" loading="lazy" />
                                </div>
                            </div>
                            <!-- gallery item end -->
                            <!-- gallery item start -->
                            <div class="gallery-item">
                                <div class="gallery-item-inner">
                                    <img src="/images/DSC_5238.webp" alt="Image 3" loading="lazy" />
                                </div>
                            </div>
                            <!-- gallery item end -->
                            <!-- gallery item start -->
                            <div class="gallery-item">
                                <div class="gallery-item-inner">
                                    <img src="/images/DSC_5256.webp" alt="Image 4" loading="lazy" />
                                </div>
                            </div>
                            <!-- gallery item end -->
                            <!-- gallery item start -->

                            <!-- gallery item end -->
                            <!-- gallery item start -->
                            <div class="gallery-item">
                                <div class="gallery-item-inner">
                                    <img src="/images/DSC_5155.webp" alt="Image 6" loading="lazy" />
                                </div>
                            </div>
                            <div class="gallery-item">
                                <div class="gallery-item-inner">
                                    <img src="/images/DSC_5215.webp" alt="Image 6" loading="lazy" />
                                </div>
                            </div>
                            <!-- gallery item end -->
                        </div>
                    </div>
                </div>
            </div>
            <!-- Add modal container -->
            <div id="imageModal" class="modal">
                <span class="close">&times;</span>
                <img class="modal-content" id="modalImage" />
            </div>
        </section>
        <script>
            function setupGalleryFilter() {
                const filterContainer = document.querySelector('.gallery-filter')
                if (filterContainer) {
                    const galleryItems = document.querySelectorAll('.gallery-item')

                    filterContainer.addEventListener('click', (event) => {
                        const target = event.target as HTMLElement
                        if (target.classList.contains('filter-item')) {
                            updateActiveFilter(filterContainer, target)
                            filterGalleryItems(target, galleryItems)
                        }
                    })
                }
            }

            function updateActiveFilter(filterContainer: Element, target: HTMLElement) {
                filterContainer.querySelector('.active')?.classList.remove('active')
                target.classList.add('active')
            }

            function filterGalleryItems(target: HTMLElement, galleryItems: NodeListOf<Element>) {
                const filterValue = target.getAttribute('data-filter')
                if (filterValue !== null) {
                    galleryItems.forEach((item) => {
                        if (item.classList.contains(filterValue) || filterValue === 'all') {
                            item.classList.remove('hide')
                            item.classList.add('show')
                        } else {
                            item.classList.remove('show')
                            item.classList.add('hide')
                        }
                    })
                }
            }

            function setupImageModal() {
                const modal = document.getElementById('imageModal')
                const modalImg = document.getElementById('modalImage') as HTMLImageElement
                const galleryImages = document.querySelectorAll('.gallery-item-inner img')
                const closeBtn = document.querySelector('.close') as HTMLElement

                galleryImages.forEach((img) => {
                    img.addEventListener('click', () => openModal(modal!, modalImg!, img as HTMLImageElement))
                })

                closeBtn?.addEventListener('click', () => closeModal(modal!))

                document.addEventListener('click', (event) => {
                    if (event.target == modal) {
                        closeModal(modal!)
                    }
                })
            }

            function openModal(modal: HTMLElement, modalImg: HTMLImageElement, img: HTMLImageElement) {
                modal.style.display = 'flex'
                modalImg.src = img.src
            }

            function closeModal(modal: HTMLElement) {
                modal.style.display = 'none'
            }

            setupGalleryFilter()
            setupImageModal()

            document.addEventListener('DOMContentLoaded', () => {
                setupGalleryFilter()
                setupImageModal()
            })
            document.addEventListener('astro:after-swap', () => {
                setupGalleryFilter()
                setupImageModal()
            })
        </script>
        <style lang="scss">
            .page-header--galerie {
                background-position-y: -50rem;
            }
            .row {
                display: flex;
                flex-wrap: wrap;
            }
            img {
                max-width: 100%;
                vertical-align: middle;
                max-height: 400px;
                object-fit: cover;
            }
            /*.gallery*/
            .gallery {
                width: 100%;
                display: block;
                padding: 20px 0;
                padding-top: 80px;

                @media (max-width: 767px) {
                    padding-top: 3rem;
                }
            }
            .gallery .gallery-filter {
                padding: 0 15px;
                width: 100%;
                text-align: center;
                margin-bottom: 20px;
            }
            .gallery .gallery-filter .filter-item {
                color: #ffffff;
                font-size: 1.6rem;
                font-family: $ff-heading;

                display: inline-block;
                margin: 0 10px;
                cursor: pointer;
                border-bottom: 2px solid transparent;
                line-height: 1.2;
                transition: all 0.3s ease;
            }
            .gallery .gallery-filter .filter-item.active {
                color: $clr-primary;
                border-color: $clr-primary;
            }
            .gallery .gallery-item {
                width: calc(100% / 3);
                padding: 15px;
                cursor: pointer;
            }
            .gallery .gallery-item-inner img {
                width: 100%;
            }
            .gallery .gallery-item.show {
                animation: fadeIn 0.5s ease;
            }
            @keyframes fadeIn {
                0% {
                    opacity: 0;
                }
                100% {
                    opacity: 1;
                }
            }
            .gallery .gallery-item.hide {
                display: none;
            }

            /*responsive*/
            @media (max-width: 991px) {
                .gallery .gallery-item {
                    width: 50%;
                }
            }
            @media (max-width: 767px) {
                .gallery .gallery-item {
                    width: 100%;
                }
                .gallery .gallery-filter .filter-item {
                    margin-bottom: 10px;
                }
            }

            /* Modal styles */
            .modal {
                display: none;
                position: fixed;
                z-index: 1000;
                padding-top: 100px;
                left: 0;
                top: 0;
                width: 100%;
                height: 100%;
                overflow: auto;
                background-color: rgba(0, 0, 0, 0.9);
            }

            .modal-content {
                margin: auto;
                display: block;
                width: 80%;
                max-width: 700px;
                padding: 20px;
            }

            .close {
                position: absolute;
                top: 15px;
                right: 35px;
                color: #f1f1f1;
                font-size: 40px;
                font-weight: bold;
                transition: 0.3s;
                &:hover,
                &:focus {
                    color: #bbb;
                    text-decoration: none;
                    cursor: pointer;
                }
            }

            @media only screen and (max-width: 767px) {
                .modal-content {
                    width: 100%;
                }
            }
        </style>
    </main>
</Layout>
